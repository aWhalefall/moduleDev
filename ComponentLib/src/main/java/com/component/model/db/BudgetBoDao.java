package com.component.model.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tbl_budget".
*/
public class BudgetBoDao extends AbstractDao<BudgetBo, Long> {

    public static final String TABLENAME = "tbl_budget";

    /**
     * Properties of entity BudgetBo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AId = new Property(1, String.class, "aId", false, "A_ID");
        public final static Property Uid = new Property(2, String.class, "uid", false, "UID");
        public final static Property Amount = new Property(3, float.class, "amount", false, "AMOUNT");
        public final static Property Year = new Property(4, String.class, "year", false, "YEAR");
        public final static Property ADate = new Property(5, String.class, "aDate", false, "A_DATE");
        public final static Property Month = new Property(6, String.class, "month", false, "MONTH");
        public final static Property Day = new Property(7, String.class, "day", false, "DAY");
    }


    public BudgetBoDao(DaoConfig config) {
        super(config);
    }
    
    public BudgetBoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tbl_budget\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"A_ID\" TEXT," + // 1: aId
                "\"UID\" TEXT," + // 2: uid
                "\"AMOUNT\" REAL NOT NULL ," + // 3: amount
                "\"YEAR\" TEXT," + // 4: year
                "\"A_DATE\" TEXT UNIQUE ," + // 5: aDate
                "\"MONTH\" TEXT," + // 6: month
                "\"DAY\" TEXT);"); // 7: day
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tbl_budget\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BudgetBo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String aId = entity.getAId();
        if (aId != null) {
            stmt.bindString(2, aId);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(3, uid);
        }
        stmt.bindDouble(4, entity.getAmount());
 
        String year = entity.getYear();
        if (year != null) {
            stmt.bindString(5, year);
        }
 
        String aDate = entity.getADate();
        if (aDate != null) {
            stmt.bindString(6, aDate);
        }
 
        String month = entity.getMonth();
        if (month != null) {
            stmt.bindString(7, month);
        }
 
        String day = entity.getDay();
        if (day != null) {
            stmt.bindString(8, day);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BudgetBo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String aId = entity.getAId();
        if (aId != null) {
            stmt.bindString(2, aId);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(3, uid);
        }
        stmt.bindDouble(4, entity.getAmount());
 
        String year = entity.getYear();
        if (year != null) {
            stmt.bindString(5, year);
        }
 
        String aDate = entity.getADate();
        if (aDate != null) {
            stmt.bindString(6, aDate);
        }
 
        String month = entity.getMonth();
        if (month != null) {
            stmt.bindString(7, month);
        }
 
        String day = entity.getDay();
        if (day != null) {
            stmt.bindString(8, day);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BudgetBo readEntity(Cursor cursor, int offset) {
        BudgetBo entity = new BudgetBo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // aId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // uid
            cursor.getFloat(offset + 3), // amount
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // year
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // aDate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // month
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // day
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BudgetBo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAmount(cursor.getFloat(offset + 3));
        entity.setYear(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setADate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMonth(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDay(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BudgetBo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BudgetBo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BudgetBo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
